# Makefile.in generated by automake 1.10 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/etracer
pkglibdir = $(libdir)/etracer
pkgincludedir = $(includedir)/etracer
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
bin_PROGRAMS = etracer$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_etracer_OBJECTS = ssbutton.$(OBJEXT) checkbox.$(OBJEXT) \
	textarea.$(OBJEXT) ui_mgr.$(OBJEXT) ui_snow.$(OBJEXT) \
	ui_theme.$(OBJEXT) button.$(OBJEXT) frame.$(OBJEXT) \
	entry.$(OBJEXT) widget.$(OBJEXT) color.$(OBJEXT) \
	matrix.$(OBJEXT) quat.$(OBJEXT) vec2d.$(OBJEXT) \
	vec3d.$(OBJEXT) plane.$(OBJEXT) glhelper.$(OBJEXT) \
	poly.$(OBJEXT) audio.$(OBJEXT) audio_data.$(OBJEXT) \
	image.$(OBJEXT) png_reader.$(OBJEXT) rgb_reader.$(OBJEXT) \
	ppm_writer.$(OBJEXT) course_load.$(OBJEXT) \
	course_mgr.$(OBJEXT) course_quad.$(OBJEXT) \
	course_render.$(OBJEXT) credits.$(OBJEXT) debug.$(OBJEXT) \
	error_util.$(OBJEXT) event_select.$(OBJEXT) \
	file_util.$(OBJEXT) fog.$(OBJEXT) fps.$(OBJEXT) \
	game_config.$(OBJEXT) game_type_select.$(OBJEXT) \
	game_over.$(OBJEXT) gl_util.$(OBJEXT) hier.$(OBJEXT) \
	hier_cb.$(OBJEXT) hier_util.$(OBJEXT) highscore.$(OBJEXT) \
	hud.$(OBJEXT) intro.$(OBJEXT) joystick.$(OBJEXT) \
	keyframe.$(OBJEXT) lights.$(OBJEXT) loading.$(OBJEXT) \
	loop.$(OBJEXT) main.$(OBJEXT) mirror_course.$(OBJEXT) \
	player.$(OBJEXT) nmrcl.$(OBJEXT) os_util.$(OBJEXT) \
	part_sys.$(OBJEXT) paused.$(OBJEXT) phys_sim.$(OBJEXT) \
	quadtree.$(OBJEXT) race_select.$(OBJEXT) \
	event_race_select.$(OBJEXT) racing.$(OBJEXT) \
	render_util.$(OBJEXT) reset.$(OBJEXT) screenshot.$(OBJEXT) \
	snow.$(OBJEXT) splash_screen.$(OBJEXT) string_util.$(OBJEXT) \
	tcl_util.$(OBJEXT) tex_font_metrics.$(OBJEXT) \
	textures.$(OBJEXT) track_marks.$(OBJEXT) model_hndl.$(OBJEXT) \
	tux_shadow.$(OBJEXT) view.$(OBJEXT) viewfrustum.$(OBJEXT) \
	winsys.$(OBJEXT) videoconfig.$(OBJEXT) audioconfig.$(OBJEXT) \
	configmode.$(OBJEXT) configuration.$(OBJEXT) \
	graphicsconfig.$(OBJEXT) joystickconfig.$(OBJEXT) \
	keyboardconfig.$(OBJEXT) stuff.$(OBJEXT) game_mgr.$(OBJEXT) \
	bench.$(OBJEXT) callbacks.$(OBJEXT) translation.$(OBJEXT) \
	alignment.$(OBJEXT) model.$(OBJEXT) model_ac.$(OBJEXT) \
	font.$(OBJEXT) label.$(OBJEXT) FTCharmap.$(OBJEXT) \
	FTFace.$(OBJEXT) FTFont.$(OBJEXT) FTGLTextureFont.$(OBJEXT) \
	FTGlyph.$(OBJEXT) FTGlyphContainer.$(OBJEXT) \
	FTLibrary.$(OBJEXT) FTPoint.$(OBJEXT) FTSize.$(OBJEXT) \
	FTTextureGlyph.$(OBJEXT)
etracer_OBJECTS = $(am_etracer_OBJECTS)
etracer_LDADD = $(LDADD)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(etracer_SOURCES)
DIST_SOURCES = $(etracer_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/torandi/builds/etracer/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/torandi/builds/etracer/missing --run tar
AUTOCONF = ${SHELL} /home/torandi/builds/etracer/missing --run autoconf
AUTOHEADER = ${SHELL} /home/torandi/builds/etracer/missing --run autoheader
AUTOMAKE = ${SHELL} /home/torandi/builds/etracer/missing --run automake-1.10
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2  -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
CPP = gcc -E
CPPFLAGS =   -DTUXRACER_NO_ASSERT=1 -DHAVE_SDL_MIXER=1 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2  -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT -I/usr/include/tcl8.4/tcl-private/generic -I/usr/include/tcl8.4 -I/usr/include/libpng12   -I/usr/local/include/freetype2 -I/usr/local/include
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FT2_CFLAGS = -I/usr/local/include/freetype2 -I/usr/local/include
FT2_CONFIG = /usr/local/bin/freetype-config
FT2_LIBS = -L/usr/local/lib -Wl,--rpath -Wl,/usr/local/lib -lfreetype -lz
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS =   -lSM -lICE  -lX11 -lXi -lXext -lXmu -lXt   -ldl -lm -L/usr/lib -lSDL -lSDL_mixer  -lGL -lGLU -L/usr/lib -ltcl8.4${TCL_DBGX} -ldl  -lpthread -lieee -lm -lpng12   -L/usr/local/lib -Wl,--rpath -Wl,/usr/local/lib -lfreetype -lz
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/torandi/builds/etracer/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = etracer
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SDL_CFLAGS = -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
SDL_CONFIG = /usr/bin/sdl-config
SDL_LIBS = -L/usr/lib -lSDL
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
TR_CFLAGS =  -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
TR_CPPFLAGS =  -DTUXRACER_NO_ASSERT=1 -DHAVE_SDL_MIXER=1 
TR_CXXFLAGS =  -I/usr/include/SDL -D_GNU_SOURCE=1 -D_REENTRANT
TR_LIBS =  -lSM -lICE  -lX11 -lXi -lXext -lXmu -lXt   -ldl -lm -L/usr/lib -lSDL -lSDL_mixer  -lGL -lGLU
VERSION = SVN Development
XMKMF = 
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /home/torandi/builds/etracer/src
abs_srcdir = /home/torandi/builds/etracer/src
abs_top_builddir = /home/torandi/builds/etracer
abs_top_srcdir = /home/torandi/builds/etracer
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/torandi/builds/etracer/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
ppdatadir = ${datarootdir}/etracer
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_builddir = ..
top_srcdir = ..
AM_CPPFLAGS = -DPP_DATADIR=\"$(ppdatadir)\"
etracer_SOURCES = \
	ppgltk/ppgltk.h				\
	ppgltk/listbox.h			\
	ppgltk/ssbutton.cpp			\
	ppgltk/ssbutton.h			\
	ppgltk/checkbox.cpp			\
	ppgltk/checkbox.h			\
	ppgltk/textarea.cpp			\
	ppgltk/textarea.h			\
	ppgltk/ui_mgr.cpp			\
	ppgltk/ui_mgr.h				\
	ppgltk/ui_snow.cpp			\
	ppgltk/ui_snow.h			\
	ppgltk/ui_theme.cpp			\
	ppgltk/ui_theme.h			\
	ppgltk/button.cpp			\
	ppgltk/button.h				\
	ppgltk/frame.cpp			\
	ppgltk/frame.h				\
	ppgltk/entry.cpp			\
	ppgltk/entry.h				\
	ppgltk/widget.cpp			\
	ppgltk/widget.h				\
	ppgltk/alg/color.cpp			\
	ppgltk/alg/color.h			\
	ppgltk/alg/defs.h			\
	ppgltk/alg/matrix.cpp			\
	ppgltk/alg/matrix.h			\
	ppgltk/alg/quat.cpp			\
	ppgltk/alg/quat.h			\
	ppgltk/alg/vec2d.cpp			\
	ppgltk/alg/vec2d.h			\
	ppgltk/alg/vec3d.cpp			\
	ppgltk/alg/vec3d.h			\
	ppgltk/alg/plane.h			\
	ppgltk/alg/plane.cpp			\
	ppgltk/alg/glhelper.h			\
	ppgltk/alg/gaus.h			\
	ppgltk/alg/glhelper.cpp			\
	ppgltk/alg/poly.h			\
	ppgltk/alg/poly.cpp			\
	ppgltk/alg/signal.h			\
	ppgltk/audio/audio.cpp			\
	ppgltk/audio/audio.h			\
	ppgltk/audio/audio_data.cpp		\
	ppgltk/audio/audio_data.h		\
	ppgltk/images/image.cpp			\
	ppgltk/images/image.h			\
	ppgltk/images/png_reader.cpp		\
	ppgltk/images/png_reader.h		\
	ppgltk/images/rgb_reader.cpp		\
	ppgltk/images/rgb_reader.h		\
	ppgltk/images/ppm_writer.cpp		\
	ppgltk/images/ppm_writer.h		\
	course_load.cpp				\
	course_load.h				\
	course_mgr.cpp				\
	course_mgr.h				\
	course_quad.cpp				\
	course_quad.h				\
	course_render.cpp			\
	course_render.h				\
	credits.cpp				\
	credits.h				\
	debug.cpp				\
	debug.h					\
	error_util.cpp				\
	error_util.h				\
	event_select.cpp			\
	event_select.h				\
	file_util.cpp				\
	file_util.h				\
	fog.cpp					\
	fog.h					\
	fps.cpp					\
	fps.h					\
        game_config.cpp				\
        game_config.h				\
        game_type_select.cpp			\
        game_type_select.h			\
        game_over.cpp				\
        game_over.h				\
	gl_util.cpp				\
	gl_util.h				\
	hier.cpp				\
	hier.h					\
	hier_cb.cpp				\
	hier_cb.h				\
	hier_util.cpp				\
	hier_util.h				\
  highscore.cpp   \
  highscore.h   \
	hud.cpp					\
	hud.h					\
	intro.cpp				\
	intro.h					\
	joystick.cpp				\
	joystick.h				\
	keyframe.cpp				\
	keyframe.h				\
	lights.cpp				\
	lights.h				\
	loading.cpp				\
	loading.h				\
	loop.cpp				\
	loop.h					\
	main.cpp				\
	mirror_course.cpp			\
	mirror_course.h				\
	player.cpp				\
	player.h				\
	pp_classes.h				\
        nmrcl.cpp				\
        nmrcl.h					\
        os_util.cpp				\
        os_util.h				\
	part_sys.cpp				\
	part_sys.h				\
	paused.cpp				\
	paused.h				\
	phys_sim.cpp				\
	phys_sim.h				\
	quadtree.cpp				\
	quadtree.h				\
	race_select.cpp				\
	race_select.h				\
	event_race_select.cpp			\
	event_race_select.h			\
	racing.cpp				\
	racing.h				\
	render_util.cpp				\
	render_util.h				\
	reset.h					\
        reset.cpp				\
	screenshot.cpp				\
	screenshot.h				\
	snow.cpp				\
	snow.h					\
	splash_screen.cpp			\
	splash_screen.h				\
	string_util.cpp				\
	string_util.h				\
	tcl_util.cpp				\
	tcl_util.h				\
	tex_font_metrics.cpp			\
	tex_font_metrics.h			\
	textures.cpp				\
	textures.h				\
        track_marks.cpp				\
        track_marks.h				\
	model_hndl.cpp					\
	model_hndl.h					\
        tux_shadow.cpp				\
        tux_shadow.h				\
	pp_types.h				\
	view.cpp				\
	view.h					\
	viewfrustum.cpp				\
	viewfrustum.h				\
	winsys.cpp				\
	winsys.h				\
	videoconfig.cpp				\
	videoconfig.h				\
	audioconfig.cpp				\
	audioconfig.h				\
	configmode.cpp				\
	configmode.h				\
	configuration.cpp			\
	configuration.h				\
	graphicsconfig.cpp			\
	graphicsconfig.h			\
	joystickconfig.cpp			\
	joystickconfig.h			\
	keyboardconfig.cpp			\
	keyboardconfig.h			\
	stuff.cpp				\
	stuff.h					\
	game_mgr.cpp				\
	game_mgr.h				\
	bench.cpp				\
	bench.h					\
	callbacks.cpp				\
	callbacks.h				\
	translation.cpp				\
	translation.h				\
	ppgltk/alignment.cpp			\
	ppgltk/alignment.h			\
	ppgltk/model.cpp			\
	ppgltk/model.h				\
	ppgltk/model_ac.cpp			\
	ppgltk/model_ac.h			\
	ppgltk/font.cpp				\
	ppgltk/font.h				\
	ppgltk/label.cpp			\
	ppgltk/label.h				\
	\
	\
	ppgltk/FT/FTBBox.h		\
	ppgltk/FT/FTCharToGlyphIndexMap.h	\
	ppgltk/FT/FTCharmap.h		\
	ppgltk/FT/FTFace.h		\
	ppgltk/FT/FTFont.h		\
	ppgltk/FT/FTGL.h		\
	ppgltk/FT/FTGLTextureFont.h	\
	ppgltk/FT/FTGlyph.h		\
	ppgltk/FT/FTGlyphContainer.h	\
	ppgltk/FT/FTLibrary.h		\
	ppgltk/FT/FTList.h		\
	ppgltk/FT/FTPoint.h		\
	ppgltk/FT/FTSize.h		\
	ppgltk/FT/FTVector.h		\
	ppgltk/FT/FTTextureGlyph.h	\
	\
	\
	ppgltk/FT/FTCharmap.cpp		\
	ppgltk/FT/FTFace.cpp		\
	ppgltk/FT/FTFont.cpp		\
	ppgltk/FT/FTGLTextureFont.cpp	\
	ppgltk/FT/FTGlyph.cpp		\
	ppgltk/FT/FTGlyphContainer.cpp	\
	ppgltk/FT/FTLibrary.cpp		\
	ppgltk/FT/FTPoint.cpp		\
	ppgltk/FT/FTSize.cpp		\
	ppgltk/FT/FTTextureGlyph.cpp

EXTRA_DIST = ppgltk/listbox.cpp 	\
	ppgltk/FT/license.txt		\
	ppgltk/FT/README.txt

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
etracer$(EXEEXT): $(etracer_OBJECTS) $(etracer_DEPENDENCIES) 
	@rm -f etracer$(EXEEXT)
	$(CXXLINK) $(etracer_OBJECTS) $(etracer_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/FTCharmap.Po
include ./$(DEPDIR)/FTFace.Po
include ./$(DEPDIR)/FTFont.Po
include ./$(DEPDIR)/FTGLTextureFont.Po
include ./$(DEPDIR)/FTGlyph.Po
include ./$(DEPDIR)/FTGlyphContainer.Po
include ./$(DEPDIR)/FTLibrary.Po
include ./$(DEPDIR)/FTPoint.Po
include ./$(DEPDIR)/FTSize.Po
include ./$(DEPDIR)/FTTextureGlyph.Po
include ./$(DEPDIR)/alignment.Po
include ./$(DEPDIR)/audio.Po
include ./$(DEPDIR)/audio_data.Po
include ./$(DEPDIR)/audioconfig.Po
include ./$(DEPDIR)/bench.Po
include ./$(DEPDIR)/button.Po
include ./$(DEPDIR)/callbacks.Po
include ./$(DEPDIR)/checkbox.Po
include ./$(DEPDIR)/color.Po
include ./$(DEPDIR)/configmode.Po
include ./$(DEPDIR)/configuration.Po
include ./$(DEPDIR)/course_load.Po
include ./$(DEPDIR)/course_mgr.Po
include ./$(DEPDIR)/course_quad.Po
include ./$(DEPDIR)/course_render.Po
include ./$(DEPDIR)/credits.Po
include ./$(DEPDIR)/debug.Po
include ./$(DEPDIR)/entry.Po
include ./$(DEPDIR)/error_util.Po
include ./$(DEPDIR)/event_race_select.Po
include ./$(DEPDIR)/event_select.Po
include ./$(DEPDIR)/file_util.Po
include ./$(DEPDIR)/fog.Po
include ./$(DEPDIR)/font.Po
include ./$(DEPDIR)/fps.Po
include ./$(DEPDIR)/frame.Po
include ./$(DEPDIR)/game_config.Po
include ./$(DEPDIR)/game_mgr.Po
include ./$(DEPDIR)/game_over.Po
include ./$(DEPDIR)/game_type_select.Po
include ./$(DEPDIR)/gl_util.Po
include ./$(DEPDIR)/glhelper.Po
include ./$(DEPDIR)/graphicsconfig.Po
include ./$(DEPDIR)/hier.Po
include ./$(DEPDIR)/hier_cb.Po
include ./$(DEPDIR)/hier_util.Po
include ./$(DEPDIR)/highscore.Po
include ./$(DEPDIR)/hud.Po
include ./$(DEPDIR)/image.Po
include ./$(DEPDIR)/intro.Po
include ./$(DEPDIR)/joystick.Po
include ./$(DEPDIR)/joystickconfig.Po
include ./$(DEPDIR)/keyboardconfig.Po
include ./$(DEPDIR)/keyframe.Po
include ./$(DEPDIR)/label.Po
include ./$(DEPDIR)/lights.Po
include ./$(DEPDIR)/loading.Po
include ./$(DEPDIR)/loop.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/matrix.Po
include ./$(DEPDIR)/mirror_course.Po
include ./$(DEPDIR)/model.Po
include ./$(DEPDIR)/model_ac.Po
include ./$(DEPDIR)/model_hndl.Po
include ./$(DEPDIR)/nmrcl.Po
include ./$(DEPDIR)/os_util.Po
include ./$(DEPDIR)/part_sys.Po
include ./$(DEPDIR)/paused.Po
include ./$(DEPDIR)/phys_sim.Po
include ./$(DEPDIR)/plane.Po
include ./$(DEPDIR)/player.Po
include ./$(DEPDIR)/png_reader.Po
include ./$(DEPDIR)/poly.Po
include ./$(DEPDIR)/ppm_writer.Po
include ./$(DEPDIR)/quadtree.Po
include ./$(DEPDIR)/quat.Po
include ./$(DEPDIR)/race_select.Po
include ./$(DEPDIR)/racing.Po
include ./$(DEPDIR)/render_util.Po
include ./$(DEPDIR)/reset.Po
include ./$(DEPDIR)/rgb_reader.Po
include ./$(DEPDIR)/screenshot.Po
include ./$(DEPDIR)/snow.Po
include ./$(DEPDIR)/splash_screen.Po
include ./$(DEPDIR)/ssbutton.Po
include ./$(DEPDIR)/string_util.Po
include ./$(DEPDIR)/stuff.Po
include ./$(DEPDIR)/tcl_util.Po
include ./$(DEPDIR)/tex_font_metrics.Po
include ./$(DEPDIR)/textarea.Po
include ./$(DEPDIR)/textures.Po
include ./$(DEPDIR)/track_marks.Po
include ./$(DEPDIR)/translation.Po
include ./$(DEPDIR)/tux_shadow.Po
include ./$(DEPDIR)/ui_mgr.Po
include ./$(DEPDIR)/ui_snow.Po
include ./$(DEPDIR)/ui_theme.Po
include ./$(DEPDIR)/vec2d.Po
include ./$(DEPDIR)/vec3d.Po
include ./$(DEPDIR)/videoconfig.Po
include ./$(DEPDIR)/view.Po
include ./$(DEPDIR)/viewfrustum.Po
include ./$(DEPDIR)/widget.Po
include ./$(DEPDIR)/winsys.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ssbutton.o: ppgltk/ssbutton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ssbutton.o -MD -MP -MF $(DEPDIR)/ssbutton.Tpo -c -o ssbutton.o `test -f 'ppgltk/ssbutton.cpp' || echo '$(srcdir)/'`ppgltk/ssbutton.cpp
	mv -f $(DEPDIR)/ssbutton.Tpo $(DEPDIR)/ssbutton.Po
#	source='ppgltk/ssbutton.cpp' object='ssbutton.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ssbutton.o `test -f 'ppgltk/ssbutton.cpp' || echo '$(srcdir)/'`ppgltk/ssbutton.cpp

ssbutton.obj: ppgltk/ssbutton.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ssbutton.obj -MD -MP -MF $(DEPDIR)/ssbutton.Tpo -c -o ssbutton.obj `if test -f 'ppgltk/ssbutton.cpp'; then $(CYGPATH_W) 'ppgltk/ssbutton.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ssbutton.cpp'; fi`
	mv -f $(DEPDIR)/ssbutton.Tpo $(DEPDIR)/ssbutton.Po
#	source='ppgltk/ssbutton.cpp' object='ssbutton.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ssbutton.obj `if test -f 'ppgltk/ssbutton.cpp'; then $(CYGPATH_W) 'ppgltk/ssbutton.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ssbutton.cpp'; fi`

checkbox.o: ppgltk/checkbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT checkbox.o -MD -MP -MF $(DEPDIR)/checkbox.Tpo -c -o checkbox.o `test -f 'ppgltk/checkbox.cpp' || echo '$(srcdir)/'`ppgltk/checkbox.cpp
	mv -f $(DEPDIR)/checkbox.Tpo $(DEPDIR)/checkbox.Po
#	source='ppgltk/checkbox.cpp' object='checkbox.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o checkbox.o `test -f 'ppgltk/checkbox.cpp' || echo '$(srcdir)/'`ppgltk/checkbox.cpp

checkbox.obj: ppgltk/checkbox.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT checkbox.obj -MD -MP -MF $(DEPDIR)/checkbox.Tpo -c -o checkbox.obj `if test -f 'ppgltk/checkbox.cpp'; then $(CYGPATH_W) 'ppgltk/checkbox.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/checkbox.cpp'; fi`
	mv -f $(DEPDIR)/checkbox.Tpo $(DEPDIR)/checkbox.Po
#	source='ppgltk/checkbox.cpp' object='checkbox.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o checkbox.obj `if test -f 'ppgltk/checkbox.cpp'; then $(CYGPATH_W) 'ppgltk/checkbox.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/checkbox.cpp'; fi`

textarea.o: ppgltk/textarea.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT textarea.o -MD -MP -MF $(DEPDIR)/textarea.Tpo -c -o textarea.o `test -f 'ppgltk/textarea.cpp' || echo '$(srcdir)/'`ppgltk/textarea.cpp
	mv -f $(DEPDIR)/textarea.Tpo $(DEPDIR)/textarea.Po
#	source='ppgltk/textarea.cpp' object='textarea.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o textarea.o `test -f 'ppgltk/textarea.cpp' || echo '$(srcdir)/'`ppgltk/textarea.cpp

textarea.obj: ppgltk/textarea.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT textarea.obj -MD -MP -MF $(DEPDIR)/textarea.Tpo -c -o textarea.obj `if test -f 'ppgltk/textarea.cpp'; then $(CYGPATH_W) 'ppgltk/textarea.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/textarea.cpp'; fi`
	mv -f $(DEPDIR)/textarea.Tpo $(DEPDIR)/textarea.Po
#	source='ppgltk/textarea.cpp' object='textarea.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o textarea.obj `if test -f 'ppgltk/textarea.cpp'; then $(CYGPATH_W) 'ppgltk/textarea.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/textarea.cpp'; fi`

ui_mgr.o: ppgltk/ui_mgr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_mgr.o -MD -MP -MF $(DEPDIR)/ui_mgr.Tpo -c -o ui_mgr.o `test -f 'ppgltk/ui_mgr.cpp' || echo '$(srcdir)/'`ppgltk/ui_mgr.cpp
	mv -f $(DEPDIR)/ui_mgr.Tpo $(DEPDIR)/ui_mgr.Po
#	source='ppgltk/ui_mgr.cpp' object='ui_mgr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_mgr.o `test -f 'ppgltk/ui_mgr.cpp' || echo '$(srcdir)/'`ppgltk/ui_mgr.cpp

ui_mgr.obj: ppgltk/ui_mgr.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_mgr.obj -MD -MP -MF $(DEPDIR)/ui_mgr.Tpo -c -o ui_mgr.obj `if test -f 'ppgltk/ui_mgr.cpp'; then $(CYGPATH_W) 'ppgltk/ui_mgr.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_mgr.cpp'; fi`
	mv -f $(DEPDIR)/ui_mgr.Tpo $(DEPDIR)/ui_mgr.Po
#	source='ppgltk/ui_mgr.cpp' object='ui_mgr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_mgr.obj `if test -f 'ppgltk/ui_mgr.cpp'; then $(CYGPATH_W) 'ppgltk/ui_mgr.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_mgr.cpp'; fi`

ui_snow.o: ppgltk/ui_snow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_snow.o -MD -MP -MF $(DEPDIR)/ui_snow.Tpo -c -o ui_snow.o `test -f 'ppgltk/ui_snow.cpp' || echo '$(srcdir)/'`ppgltk/ui_snow.cpp
	mv -f $(DEPDIR)/ui_snow.Tpo $(DEPDIR)/ui_snow.Po
#	source='ppgltk/ui_snow.cpp' object='ui_snow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_snow.o `test -f 'ppgltk/ui_snow.cpp' || echo '$(srcdir)/'`ppgltk/ui_snow.cpp

ui_snow.obj: ppgltk/ui_snow.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_snow.obj -MD -MP -MF $(DEPDIR)/ui_snow.Tpo -c -o ui_snow.obj `if test -f 'ppgltk/ui_snow.cpp'; then $(CYGPATH_W) 'ppgltk/ui_snow.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_snow.cpp'; fi`
	mv -f $(DEPDIR)/ui_snow.Tpo $(DEPDIR)/ui_snow.Po
#	source='ppgltk/ui_snow.cpp' object='ui_snow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_snow.obj `if test -f 'ppgltk/ui_snow.cpp'; then $(CYGPATH_W) 'ppgltk/ui_snow.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_snow.cpp'; fi`

ui_theme.o: ppgltk/ui_theme.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_theme.o -MD -MP -MF $(DEPDIR)/ui_theme.Tpo -c -o ui_theme.o `test -f 'ppgltk/ui_theme.cpp' || echo '$(srcdir)/'`ppgltk/ui_theme.cpp
	mv -f $(DEPDIR)/ui_theme.Tpo $(DEPDIR)/ui_theme.Po
#	source='ppgltk/ui_theme.cpp' object='ui_theme.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_theme.o `test -f 'ppgltk/ui_theme.cpp' || echo '$(srcdir)/'`ppgltk/ui_theme.cpp

ui_theme.obj: ppgltk/ui_theme.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ui_theme.obj -MD -MP -MF $(DEPDIR)/ui_theme.Tpo -c -o ui_theme.obj `if test -f 'ppgltk/ui_theme.cpp'; then $(CYGPATH_W) 'ppgltk/ui_theme.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_theme.cpp'; fi`
	mv -f $(DEPDIR)/ui_theme.Tpo $(DEPDIR)/ui_theme.Po
#	source='ppgltk/ui_theme.cpp' object='ui_theme.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ui_theme.obj `if test -f 'ppgltk/ui_theme.cpp'; then $(CYGPATH_W) 'ppgltk/ui_theme.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/ui_theme.cpp'; fi`

button.o: ppgltk/button.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT button.o -MD -MP -MF $(DEPDIR)/button.Tpo -c -o button.o `test -f 'ppgltk/button.cpp' || echo '$(srcdir)/'`ppgltk/button.cpp
	mv -f $(DEPDIR)/button.Tpo $(DEPDIR)/button.Po
#	source='ppgltk/button.cpp' object='button.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o button.o `test -f 'ppgltk/button.cpp' || echo '$(srcdir)/'`ppgltk/button.cpp

button.obj: ppgltk/button.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT button.obj -MD -MP -MF $(DEPDIR)/button.Tpo -c -o button.obj `if test -f 'ppgltk/button.cpp'; then $(CYGPATH_W) 'ppgltk/button.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/button.cpp'; fi`
	mv -f $(DEPDIR)/button.Tpo $(DEPDIR)/button.Po
#	source='ppgltk/button.cpp' object='button.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o button.obj `if test -f 'ppgltk/button.cpp'; then $(CYGPATH_W) 'ppgltk/button.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/button.cpp'; fi`

frame.o: ppgltk/frame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT frame.o -MD -MP -MF $(DEPDIR)/frame.Tpo -c -o frame.o `test -f 'ppgltk/frame.cpp' || echo '$(srcdir)/'`ppgltk/frame.cpp
	mv -f $(DEPDIR)/frame.Tpo $(DEPDIR)/frame.Po
#	source='ppgltk/frame.cpp' object='frame.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o frame.o `test -f 'ppgltk/frame.cpp' || echo '$(srcdir)/'`ppgltk/frame.cpp

frame.obj: ppgltk/frame.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT frame.obj -MD -MP -MF $(DEPDIR)/frame.Tpo -c -o frame.obj `if test -f 'ppgltk/frame.cpp'; then $(CYGPATH_W) 'ppgltk/frame.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/frame.cpp'; fi`
	mv -f $(DEPDIR)/frame.Tpo $(DEPDIR)/frame.Po
#	source='ppgltk/frame.cpp' object='frame.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o frame.obj `if test -f 'ppgltk/frame.cpp'; then $(CYGPATH_W) 'ppgltk/frame.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/frame.cpp'; fi`

entry.o: ppgltk/entry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT entry.o -MD -MP -MF $(DEPDIR)/entry.Tpo -c -o entry.o `test -f 'ppgltk/entry.cpp' || echo '$(srcdir)/'`ppgltk/entry.cpp
	mv -f $(DEPDIR)/entry.Tpo $(DEPDIR)/entry.Po
#	source='ppgltk/entry.cpp' object='entry.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o entry.o `test -f 'ppgltk/entry.cpp' || echo '$(srcdir)/'`ppgltk/entry.cpp

entry.obj: ppgltk/entry.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT entry.obj -MD -MP -MF $(DEPDIR)/entry.Tpo -c -o entry.obj `if test -f 'ppgltk/entry.cpp'; then $(CYGPATH_W) 'ppgltk/entry.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/entry.cpp'; fi`
	mv -f $(DEPDIR)/entry.Tpo $(DEPDIR)/entry.Po
#	source='ppgltk/entry.cpp' object='entry.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o entry.obj `if test -f 'ppgltk/entry.cpp'; then $(CYGPATH_W) 'ppgltk/entry.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/entry.cpp'; fi`

widget.o: ppgltk/widget.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT widget.o -MD -MP -MF $(DEPDIR)/widget.Tpo -c -o widget.o `test -f 'ppgltk/widget.cpp' || echo '$(srcdir)/'`ppgltk/widget.cpp
	mv -f $(DEPDIR)/widget.Tpo $(DEPDIR)/widget.Po
#	source='ppgltk/widget.cpp' object='widget.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o widget.o `test -f 'ppgltk/widget.cpp' || echo '$(srcdir)/'`ppgltk/widget.cpp

widget.obj: ppgltk/widget.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT widget.obj -MD -MP -MF $(DEPDIR)/widget.Tpo -c -o widget.obj `if test -f 'ppgltk/widget.cpp'; then $(CYGPATH_W) 'ppgltk/widget.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/widget.cpp'; fi`
	mv -f $(DEPDIR)/widget.Tpo $(DEPDIR)/widget.Po
#	source='ppgltk/widget.cpp' object='widget.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o widget.obj `if test -f 'ppgltk/widget.cpp'; then $(CYGPATH_W) 'ppgltk/widget.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/widget.cpp'; fi`

color.o: ppgltk/alg/color.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT color.o -MD -MP -MF $(DEPDIR)/color.Tpo -c -o color.o `test -f 'ppgltk/alg/color.cpp' || echo '$(srcdir)/'`ppgltk/alg/color.cpp
	mv -f $(DEPDIR)/color.Tpo $(DEPDIR)/color.Po
#	source='ppgltk/alg/color.cpp' object='color.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o color.o `test -f 'ppgltk/alg/color.cpp' || echo '$(srcdir)/'`ppgltk/alg/color.cpp

color.obj: ppgltk/alg/color.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT color.obj -MD -MP -MF $(DEPDIR)/color.Tpo -c -o color.obj `if test -f 'ppgltk/alg/color.cpp'; then $(CYGPATH_W) 'ppgltk/alg/color.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/color.cpp'; fi`
	mv -f $(DEPDIR)/color.Tpo $(DEPDIR)/color.Po
#	source='ppgltk/alg/color.cpp' object='color.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o color.obj `if test -f 'ppgltk/alg/color.cpp'; then $(CYGPATH_W) 'ppgltk/alg/color.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/color.cpp'; fi`

matrix.o: ppgltk/alg/matrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT matrix.o -MD -MP -MF $(DEPDIR)/matrix.Tpo -c -o matrix.o `test -f 'ppgltk/alg/matrix.cpp' || echo '$(srcdir)/'`ppgltk/alg/matrix.cpp
	mv -f $(DEPDIR)/matrix.Tpo $(DEPDIR)/matrix.Po
#	source='ppgltk/alg/matrix.cpp' object='matrix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o matrix.o `test -f 'ppgltk/alg/matrix.cpp' || echo '$(srcdir)/'`ppgltk/alg/matrix.cpp

matrix.obj: ppgltk/alg/matrix.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT matrix.obj -MD -MP -MF $(DEPDIR)/matrix.Tpo -c -o matrix.obj `if test -f 'ppgltk/alg/matrix.cpp'; then $(CYGPATH_W) 'ppgltk/alg/matrix.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/matrix.cpp'; fi`
	mv -f $(DEPDIR)/matrix.Tpo $(DEPDIR)/matrix.Po
#	source='ppgltk/alg/matrix.cpp' object='matrix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o matrix.obj `if test -f 'ppgltk/alg/matrix.cpp'; then $(CYGPATH_W) 'ppgltk/alg/matrix.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/matrix.cpp'; fi`

quat.o: ppgltk/alg/quat.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT quat.o -MD -MP -MF $(DEPDIR)/quat.Tpo -c -o quat.o `test -f 'ppgltk/alg/quat.cpp' || echo '$(srcdir)/'`ppgltk/alg/quat.cpp
	mv -f $(DEPDIR)/quat.Tpo $(DEPDIR)/quat.Po
#	source='ppgltk/alg/quat.cpp' object='quat.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o quat.o `test -f 'ppgltk/alg/quat.cpp' || echo '$(srcdir)/'`ppgltk/alg/quat.cpp

quat.obj: ppgltk/alg/quat.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT quat.obj -MD -MP -MF $(DEPDIR)/quat.Tpo -c -o quat.obj `if test -f 'ppgltk/alg/quat.cpp'; then $(CYGPATH_W) 'ppgltk/alg/quat.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/quat.cpp'; fi`
	mv -f $(DEPDIR)/quat.Tpo $(DEPDIR)/quat.Po
#	source='ppgltk/alg/quat.cpp' object='quat.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o quat.obj `if test -f 'ppgltk/alg/quat.cpp'; then $(CYGPATH_W) 'ppgltk/alg/quat.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/quat.cpp'; fi`

vec2d.o: ppgltk/alg/vec2d.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vec2d.o -MD -MP -MF $(DEPDIR)/vec2d.Tpo -c -o vec2d.o `test -f 'ppgltk/alg/vec2d.cpp' || echo '$(srcdir)/'`ppgltk/alg/vec2d.cpp
	mv -f $(DEPDIR)/vec2d.Tpo $(DEPDIR)/vec2d.Po
#	source='ppgltk/alg/vec2d.cpp' object='vec2d.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vec2d.o `test -f 'ppgltk/alg/vec2d.cpp' || echo '$(srcdir)/'`ppgltk/alg/vec2d.cpp

vec2d.obj: ppgltk/alg/vec2d.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vec2d.obj -MD -MP -MF $(DEPDIR)/vec2d.Tpo -c -o vec2d.obj `if test -f 'ppgltk/alg/vec2d.cpp'; then $(CYGPATH_W) 'ppgltk/alg/vec2d.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/vec2d.cpp'; fi`
	mv -f $(DEPDIR)/vec2d.Tpo $(DEPDIR)/vec2d.Po
#	source='ppgltk/alg/vec2d.cpp' object='vec2d.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vec2d.obj `if test -f 'ppgltk/alg/vec2d.cpp'; then $(CYGPATH_W) 'ppgltk/alg/vec2d.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/vec2d.cpp'; fi`

vec3d.o: ppgltk/alg/vec3d.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vec3d.o -MD -MP -MF $(DEPDIR)/vec3d.Tpo -c -o vec3d.o `test -f 'ppgltk/alg/vec3d.cpp' || echo '$(srcdir)/'`ppgltk/alg/vec3d.cpp
	mv -f $(DEPDIR)/vec3d.Tpo $(DEPDIR)/vec3d.Po
#	source='ppgltk/alg/vec3d.cpp' object='vec3d.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vec3d.o `test -f 'ppgltk/alg/vec3d.cpp' || echo '$(srcdir)/'`ppgltk/alg/vec3d.cpp

vec3d.obj: ppgltk/alg/vec3d.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT vec3d.obj -MD -MP -MF $(DEPDIR)/vec3d.Tpo -c -o vec3d.obj `if test -f 'ppgltk/alg/vec3d.cpp'; then $(CYGPATH_W) 'ppgltk/alg/vec3d.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/vec3d.cpp'; fi`
	mv -f $(DEPDIR)/vec3d.Tpo $(DEPDIR)/vec3d.Po
#	source='ppgltk/alg/vec3d.cpp' object='vec3d.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o vec3d.obj `if test -f 'ppgltk/alg/vec3d.cpp'; then $(CYGPATH_W) 'ppgltk/alg/vec3d.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/vec3d.cpp'; fi`

plane.o: ppgltk/alg/plane.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT plane.o -MD -MP -MF $(DEPDIR)/plane.Tpo -c -o plane.o `test -f 'ppgltk/alg/plane.cpp' || echo '$(srcdir)/'`ppgltk/alg/plane.cpp
	mv -f $(DEPDIR)/plane.Tpo $(DEPDIR)/plane.Po
#	source='ppgltk/alg/plane.cpp' object='plane.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o plane.o `test -f 'ppgltk/alg/plane.cpp' || echo '$(srcdir)/'`ppgltk/alg/plane.cpp

plane.obj: ppgltk/alg/plane.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT plane.obj -MD -MP -MF $(DEPDIR)/plane.Tpo -c -o plane.obj `if test -f 'ppgltk/alg/plane.cpp'; then $(CYGPATH_W) 'ppgltk/alg/plane.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/plane.cpp'; fi`
	mv -f $(DEPDIR)/plane.Tpo $(DEPDIR)/plane.Po
#	source='ppgltk/alg/plane.cpp' object='plane.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o plane.obj `if test -f 'ppgltk/alg/plane.cpp'; then $(CYGPATH_W) 'ppgltk/alg/plane.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/plane.cpp'; fi`

glhelper.o: ppgltk/alg/glhelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT glhelper.o -MD -MP -MF $(DEPDIR)/glhelper.Tpo -c -o glhelper.o `test -f 'ppgltk/alg/glhelper.cpp' || echo '$(srcdir)/'`ppgltk/alg/glhelper.cpp
	mv -f $(DEPDIR)/glhelper.Tpo $(DEPDIR)/glhelper.Po
#	source='ppgltk/alg/glhelper.cpp' object='glhelper.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o glhelper.o `test -f 'ppgltk/alg/glhelper.cpp' || echo '$(srcdir)/'`ppgltk/alg/glhelper.cpp

glhelper.obj: ppgltk/alg/glhelper.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT glhelper.obj -MD -MP -MF $(DEPDIR)/glhelper.Tpo -c -o glhelper.obj `if test -f 'ppgltk/alg/glhelper.cpp'; then $(CYGPATH_W) 'ppgltk/alg/glhelper.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/glhelper.cpp'; fi`
	mv -f $(DEPDIR)/glhelper.Tpo $(DEPDIR)/glhelper.Po
#	source='ppgltk/alg/glhelper.cpp' object='glhelper.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o glhelper.obj `if test -f 'ppgltk/alg/glhelper.cpp'; then $(CYGPATH_W) 'ppgltk/alg/glhelper.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/glhelper.cpp'; fi`

poly.o: ppgltk/alg/poly.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT poly.o -MD -MP -MF $(DEPDIR)/poly.Tpo -c -o poly.o `test -f 'ppgltk/alg/poly.cpp' || echo '$(srcdir)/'`ppgltk/alg/poly.cpp
	mv -f $(DEPDIR)/poly.Tpo $(DEPDIR)/poly.Po
#	source='ppgltk/alg/poly.cpp' object='poly.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o poly.o `test -f 'ppgltk/alg/poly.cpp' || echo '$(srcdir)/'`ppgltk/alg/poly.cpp

poly.obj: ppgltk/alg/poly.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT poly.obj -MD -MP -MF $(DEPDIR)/poly.Tpo -c -o poly.obj `if test -f 'ppgltk/alg/poly.cpp'; then $(CYGPATH_W) 'ppgltk/alg/poly.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/poly.cpp'; fi`
	mv -f $(DEPDIR)/poly.Tpo $(DEPDIR)/poly.Po
#	source='ppgltk/alg/poly.cpp' object='poly.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o poly.obj `if test -f 'ppgltk/alg/poly.cpp'; then $(CYGPATH_W) 'ppgltk/alg/poly.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alg/poly.cpp'; fi`

audio.o: ppgltk/audio/audio.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio.o -MD -MP -MF $(DEPDIR)/audio.Tpo -c -o audio.o `test -f 'ppgltk/audio/audio.cpp' || echo '$(srcdir)/'`ppgltk/audio/audio.cpp
	mv -f $(DEPDIR)/audio.Tpo $(DEPDIR)/audio.Po
#	source='ppgltk/audio/audio.cpp' object='audio.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio.o `test -f 'ppgltk/audio/audio.cpp' || echo '$(srcdir)/'`ppgltk/audio/audio.cpp

audio.obj: ppgltk/audio/audio.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio.obj -MD -MP -MF $(DEPDIR)/audio.Tpo -c -o audio.obj `if test -f 'ppgltk/audio/audio.cpp'; then $(CYGPATH_W) 'ppgltk/audio/audio.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/audio/audio.cpp'; fi`
	mv -f $(DEPDIR)/audio.Tpo $(DEPDIR)/audio.Po
#	source='ppgltk/audio/audio.cpp' object='audio.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio.obj `if test -f 'ppgltk/audio/audio.cpp'; then $(CYGPATH_W) 'ppgltk/audio/audio.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/audio/audio.cpp'; fi`

audio_data.o: ppgltk/audio/audio_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio_data.o -MD -MP -MF $(DEPDIR)/audio_data.Tpo -c -o audio_data.o `test -f 'ppgltk/audio/audio_data.cpp' || echo '$(srcdir)/'`ppgltk/audio/audio_data.cpp
	mv -f $(DEPDIR)/audio_data.Tpo $(DEPDIR)/audio_data.Po
#	source='ppgltk/audio/audio_data.cpp' object='audio_data.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio_data.o `test -f 'ppgltk/audio/audio_data.cpp' || echo '$(srcdir)/'`ppgltk/audio/audio_data.cpp

audio_data.obj: ppgltk/audio/audio_data.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT audio_data.obj -MD -MP -MF $(DEPDIR)/audio_data.Tpo -c -o audio_data.obj `if test -f 'ppgltk/audio/audio_data.cpp'; then $(CYGPATH_W) 'ppgltk/audio/audio_data.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/audio/audio_data.cpp'; fi`
	mv -f $(DEPDIR)/audio_data.Tpo $(DEPDIR)/audio_data.Po
#	source='ppgltk/audio/audio_data.cpp' object='audio_data.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o audio_data.obj `if test -f 'ppgltk/audio/audio_data.cpp'; then $(CYGPATH_W) 'ppgltk/audio/audio_data.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/audio/audio_data.cpp'; fi`

image.o: ppgltk/images/image.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT image.o -MD -MP -MF $(DEPDIR)/image.Tpo -c -o image.o `test -f 'ppgltk/images/image.cpp' || echo '$(srcdir)/'`ppgltk/images/image.cpp
	mv -f $(DEPDIR)/image.Tpo $(DEPDIR)/image.Po
#	source='ppgltk/images/image.cpp' object='image.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o image.o `test -f 'ppgltk/images/image.cpp' || echo '$(srcdir)/'`ppgltk/images/image.cpp

image.obj: ppgltk/images/image.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT image.obj -MD -MP -MF $(DEPDIR)/image.Tpo -c -o image.obj `if test -f 'ppgltk/images/image.cpp'; then $(CYGPATH_W) 'ppgltk/images/image.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/image.cpp'; fi`
	mv -f $(DEPDIR)/image.Tpo $(DEPDIR)/image.Po
#	source='ppgltk/images/image.cpp' object='image.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o image.obj `if test -f 'ppgltk/images/image.cpp'; then $(CYGPATH_W) 'ppgltk/images/image.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/image.cpp'; fi`

png_reader.o: ppgltk/images/png_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT png_reader.o -MD -MP -MF $(DEPDIR)/png_reader.Tpo -c -o png_reader.o `test -f 'ppgltk/images/png_reader.cpp' || echo '$(srcdir)/'`ppgltk/images/png_reader.cpp
	mv -f $(DEPDIR)/png_reader.Tpo $(DEPDIR)/png_reader.Po
#	source='ppgltk/images/png_reader.cpp' object='png_reader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o png_reader.o `test -f 'ppgltk/images/png_reader.cpp' || echo '$(srcdir)/'`ppgltk/images/png_reader.cpp

png_reader.obj: ppgltk/images/png_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT png_reader.obj -MD -MP -MF $(DEPDIR)/png_reader.Tpo -c -o png_reader.obj `if test -f 'ppgltk/images/png_reader.cpp'; then $(CYGPATH_W) 'ppgltk/images/png_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/png_reader.cpp'; fi`
	mv -f $(DEPDIR)/png_reader.Tpo $(DEPDIR)/png_reader.Po
#	source='ppgltk/images/png_reader.cpp' object='png_reader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o png_reader.obj `if test -f 'ppgltk/images/png_reader.cpp'; then $(CYGPATH_W) 'ppgltk/images/png_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/png_reader.cpp'; fi`

rgb_reader.o: ppgltk/images/rgb_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rgb_reader.o -MD -MP -MF $(DEPDIR)/rgb_reader.Tpo -c -o rgb_reader.o `test -f 'ppgltk/images/rgb_reader.cpp' || echo '$(srcdir)/'`ppgltk/images/rgb_reader.cpp
	mv -f $(DEPDIR)/rgb_reader.Tpo $(DEPDIR)/rgb_reader.Po
#	source='ppgltk/images/rgb_reader.cpp' object='rgb_reader.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rgb_reader.o `test -f 'ppgltk/images/rgb_reader.cpp' || echo '$(srcdir)/'`ppgltk/images/rgb_reader.cpp

rgb_reader.obj: ppgltk/images/rgb_reader.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT rgb_reader.obj -MD -MP -MF $(DEPDIR)/rgb_reader.Tpo -c -o rgb_reader.obj `if test -f 'ppgltk/images/rgb_reader.cpp'; then $(CYGPATH_W) 'ppgltk/images/rgb_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/rgb_reader.cpp'; fi`
	mv -f $(DEPDIR)/rgb_reader.Tpo $(DEPDIR)/rgb_reader.Po
#	source='ppgltk/images/rgb_reader.cpp' object='rgb_reader.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o rgb_reader.obj `if test -f 'ppgltk/images/rgb_reader.cpp'; then $(CYGPATH_W) 'ppgltk/images/rgb_reader.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/rgb_reader.cpp'; fi`

ppm_writer.o: ppgltk/images/ppm_writer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ppm_writer.o -MD -MP -MF $(DEPDIR)/ppm_writer.Tpo -c -o ppm_writer.o `test -f 'ppgltk/images/ppm_writer.cpp' || echo '$(srcdir)/'`ppgltk/images/ppm_writer.cpp
	mv -f $(DEPDIR)/ppm_writer.Tpo $(DEPDIR)/ppm_writer.Po
#	source='ppgltk/images/ppm_writer.cpp' object='ppm_writer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ppm_writer.o `test -f 'ppgltk/images/ppm_writer.cpp' || echo '$(srcdir)/'`ppgltk/images/ppm_writer.cpp

ppm_writer.obj: ppgltk/images/ppm_writer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ppm_writer.obj -MD -MP -MF $(DEPDIR)/ppm_writer.Tpo -c -o ppm_writer.obj `if test -f 'ppgltk/images/ppm_writer.cpp'; then $(CYGPATH_W) 'ppgltk/images/ppm_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/ppm_writer.cpp'; fi`
	mv -f $(DEPDIR)/ppm_writer.Tpo $(DEPDIR)/ppm_writer.Po
#	source='ppgltk/images/ppm_writer.cpp' object='ppm_writer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ppm_writer.obj `if test -f 'ppgltk/images/ppm_writer.cpp'; then $(CYGPATH_W) 'ppgltk/images/ppm_writer.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/images/ppm_writer.cpp'; fi`

alignment.o: ppgltk/alignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT alignment.o -MD -MP -MF $(DEPDIR)/alignment.Tpo -c -o alignment.o `test -f 'ppgltk/alignment.cpp' || echo '$(srcdir)/'`ppgltk/alignment.cpp
	mv -f $(DEPDIR)/alignment.Tpo $(DEPDIR)/alignment.Po
#	source='ppgltk/alignment.cpp' object='alignment.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o alignment.o `test -f 'ppgltk/alignment.cpp' || echo '$(srcdir)/'`ppgltk/alignment.cpp

alignment.obj: ppgltk/alignment.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT alignment.obj -MD -MP -MF $(DEPDIR)/alignment.Tpo -c -o alignment.obj `if test -f 'ppgltk/alignment.cpp'; then $(CYGPATH_W) 'ppgltk/alignment.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alignment.cpp'; fi`
	mv -f $(DEPDIR)/alignment.Tpo $(DEPDIR)/alignment.Po
#	source='ppgltk/alignment.cpp' object='alignment.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o alignment.obj `if test -f 'ppgltk/alignment.cpp'; then $(CYGPATH_W) 'ppgltk/alignment.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/alignment.cpp'; fi`

model.o: ppgltk/model.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT model.o -MD -MP -MF $(DEPDIR)/model.Tpo -c -o model.o `test -f 'ppgltk/model.cpp' || echo '$(srcdir)/'`ppgltk/model.cpp
	mv -f $(DEPDIR)/model.Tpo $(DEPDIR)/model.Po
#	source='ppgltk/model.cpp' object='model.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o model.o `test -f 'ppgltk/model.cpp' || echo '$(srcdir)/'`ppgltk/model.cpp

model.obj: ppgltk/model.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT model.obj -MD -MP -MF $(DEPDIR)/model.Tpo -c -o model.obj `if test -f 'ppgltk/model.cpp'; then $(CYGPATH_W) 'ppgltk/model.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/model.cpp'; fi`
	mv -f $(DEPDIR)/model.Tpo $(DEPDIR)/model.Po
#	source='ppgltk/model.cpp' object='model.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o model.obj `if test -f 'ppgltk/model.cpp'; then $(CYGPATH_W) 'ppgltk/model.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/model.cpp'; fi`

model_ac.o: ppgltk/model_ac.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT model_ac.o -MD -MP -MF $(DEPDIR)/model_ac.Tpo -c -o model_ac.o `test -f 'ppgltk/model_ac.cpp' || echo '$(srcdir)/'`ppgltk/model_ac.cpp
	mv -f $(DEPDIR)/model_ac.Tpo $(DEPDIR)/model_ac.Po
#	source='ppgltk/model_ac.cpp' object='model_ac.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o model_ac.o `test -f 'ppgltk/model_ac.cpp' || echo '$(srcdir)/'`ppgltk/model_ac.cpp

model_ac.obj: ppgltk/model_ac.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT model_ac.obj -MD -MP -MF $(DEPDIR)/model_ac.Tpo -c -o model_ac.obj `if test -f 'ppgltk/model_ac.cpp'; then $(CYGPATH_W) 'ppgltk/model_ac.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/model_ac.cpp'; fi`
	mv -f $(DEPDIR)/model_ac.Tpo $(DEPDIR)/model_ac.Po
#	source='ppgltk/model_ac.cpp' object='model_ac.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o model_ac.obj `if test -f 'ppgltk/model_ac.cpp'; then $(CYGPATH_W) 'ppgltk/model_ac.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/model_ac.cpp'; fi`

font.o: ppgltk/font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT font.o -MD -MP -MF $(DEPDIR)/font.Tpo -c -o font.o `test -f 'ppgltk/font.cpp' || echo '$(srcdir)/'`ppgltk/font.cpp
	mv -f $(DEPDIR)/font.Tpo $(DEPDIR)/font.Po
#	source='ppgltk/font.cpp' object='font.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o font.o `test -f 'ppgltk/font.cpp' || echo '$(srcdir)/'`ppgltk/font.cpp

font.obj: ppgltk/font.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT font.obj -MD -MP -MF $(DEPDIR)/font.Tpo -c -o font.obj `if test -f 'ppgltk/font.cpp'; then $(CYGPATH_W) 'ppgltk/font.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/font.cpp'; fi`
	mv -f $(DEPDIR)/font.Tpo $(DEPDIR)/font.Po
#	source='ppgltk/font.cpp' object='font.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o font.obj `if test -f 'ppgltk/font.cpp'; then $(CYGPATH_W) 'ppgltk/font.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/font.cpp'; fi`

label.o: ppgltk/label.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT label.o -MD -MP -MF $(DEPDIR)/label.Tpo -c -o label.o `test -f 'ppgltk/label.cpp' || echo '$(srcdir)/'`ppgltk/label.cpp
	mv -f $(DEPDIR)/label.Tpo $(DEPDIR)/label.Po
#	source='ppgltk/label.cpp' object='label.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o label.o `test -f 'ppgltk/label.cpp' || echo '$(srcdir)/'`ppgltk/label.cpp

label.obj: ppgltk/label.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT label.obj -MD -MP -MF $(DEPDIR)/label.Tpo -c -o label.obj `if test -f 'ppgltk/label.cpp'; then $(CYGPATH_W) 'ppgltk/label.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/label.cpp'; fi`
	mv -f $(DEPDIR)/label.Tpo $(DEPDIR)/label.Po
#	source='ppgltk/label.cpp' object='label.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o label.obj `if test -f 'ppgltk/label.cpp'; then $(CYGPATH_W) 'ppgltk/label.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/label.cpp'; fi`

FTCharmap.o: ppgltk/FT/FTCharmap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTCharmap.o -MD -MP -MF $(DEPDIR)/FTCharmap.Tpo -c -o FTCharmap.o `test -f 'ppgltk/FT/FTCharmap.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTCharmap.cpp
	mv -f $(DEPDIR)/FTCharmap.Tpo $(DEPDIR)/FTCharmap.Po
#	source='ppgltk/FT/FTCharmap.cpp' object='FTCharmap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTCharmap.o `test -f 'ppgltk/FT/FTCharmap.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTCharmap.cpp

FTCharmap.obj: ppgltk/FT/FTCharmap.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTCharmap.obj -MD -MP -MF $(DEPDIR)/FTCharmap.Tpo -c -o FTCharmap.obj `if test -f 'ppgltk/FT/FTCharmap.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTCharmap.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTCharmap.cpp'; fi`
	mv -f $(DEPDIR)/FTCharmap.Tpo $(DEPDIR)/FTCharmap.Po
#	source='ppgltk/FT/FTCharmap.cpp' object='FTCharmap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTCharmap.obj `if test -f 'ppgltk/FT/FTCharmap.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTCharmap.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTCharmap.cpp'; fi`

FTFace.o: ppgltk/FT/FTFace.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTFace.o -MD -MP -MF $(DEPDIR)/FTFace.Tpo -c -o FTFace.o `test -f 'ppgltk/FT/FTFace.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTFace.cpp
	mv -f $(DEPDIR)/FTFace.Tpo $(DEPDIR)/FTFace.Po
#	source='ppgltk/FT/FTFace.cpp' object='FTFace.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTFace.o `test -f 'ppgltk/FT/FTFace.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTFace.cpp

FTFace.obj: ppgltk/FT/FTFace.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTFace.obj -MD -MP -MF $(DEPDIR)/FTFace.Tpo -c -o FTFace.obj `if test -f 'ppgltk/FT/FTFace.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTFace.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTFace.cpp'; fi`
	mv -f $(DEPDIR)/FTFace.Tpo $(DEPDIR)/FTFace.Po
#	source='ppgltk/FT/FTFace.cpp' object='FTFace.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTFace.obj `if test -f 'ppgltk/FT/FTFace.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTFace.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTFace.cpp'; fi`

FTFont.o: ppgltk/FT/FTFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTFont.o -MD -MP -MF $(DEPDIR)/FTFont.Tpo -c -o FTFont.o `test -f 'ppgltk/FT/FTFont.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTFont.cpp
	mv -f $(DEPDIR)/FTFont.Tpo $(DEPDIR)/FTFont.Po
#	source='ppgltk/FT/FTFont.cpp' object='FTFont.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTFont.o `test -f 'ppgltk/FT/FTFont.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTFont.cpp

FTFont.obj: ppgltk/FT/FTFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTFont.obj -MD -MP -MF $(DEPDIR)/FTFont.Tpo -c -o FTFont.obj `if test -f 'ppgltk/FT/FTFont.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTFont.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTFont.cpp'; fi`
	mv -f $(DEPDIR)/FTFont.Tpo $(DEPDIR)/FTFont.Po
#	source='ppgltk/FT/FTFont.cpp' object='FTFont.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTFont.obj `if test -f 'ppgltk/FT/FTFont.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTFont.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTFont.cpp'; fi`

FTGLTextureFont.o: ppgltk/FT/FTGLTextureFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGLTextureFont.o -MD -MP -MF $(DEPDIR)/FTGLTextureFont.Tpo -c -o FTGLTextureFont.o `test -f 'ppgltk/FT/FTGLTextureFont.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGLTextureFont.cpp
	mv -f $(DEPDIR)/FTGLTextureFont.Tpo $(DEPDIR)/FTGLTextureFont.Po
#	source='ppgltk/FT/FTGLTextureFont.cpp' object='FTGLTextureFont.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGLTextureFont.o `test -f 'ppgltk/FT/FTGLTextureFont.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGLTextureFont.cpp

FTGLTextureFont.obj: ppgltk/FT/FTGLTextureFont.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGLTextureFont.obj -MD -MP -MF $(DEPDIR)/FTGLTextureFont.Tpo -c -o FTGLTextureFont.obj `if test -f 'ppgltk/FT/FTGLTextureFont.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGLTextureFont.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGLTextureFont.cpp'; fi`
	mv -f $(DEPDIR)/FTGLTextureFont.Tpo $(DEPDIR)/FTGLTextureFont.Po
#	source='ppgltk/FT/FTGLTextureFont.cpp' object='FTGLTextureFont.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGLTextureFont.obj `if test -f 'ppgltk/FT/FTGLTextureFont.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGLTextureFont.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGLTextureFont.cpp'; fi`

FTGlyph.o: ppgltk/FT/FTGlyph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGlyph.o -MD -MP -MF $(DEPDIR)/FTGlyph.Tpo -c -o FTGlyph.o `test -f 'ppgltk/FT/FTGlyph.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGlyph.cpp
	mv -f $(DEPDIR)/FTGlyph.Tpo $(DEPDIR)/FTGlyph.Po
#	source='ppgltk/FT/FTGlyph.cpp' object='FTGlyph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGlyph.o `test -f 'ppgltk/FT/FTGlyph.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGlyph.cpp

FTGlyph.obj: ppgltk/FT/FTGlyph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGlyph.obj -MD -MP -MF $(DEPDIR)/FTGlyph.Tpo -c -o FTGlyph.obj `if test -f 'ppgltk/FT/FTGlyph.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGlyph.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGlyph.cpp'; fi`
	mv -f $(DEPDIR)/FTGlyph.Tpo $(DEPDIR)/FTGlyph.Po
#	source='ppgltk/FT/FTGlyph.cpp' object='FTGlyph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGlyph.obj `if test -f 'ppgltk/FT/FTGlyph.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGlyph.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGlyph.cpp'; fi`

FTGlyphContainer.o: ppgltk/FT/FTGlyphContainer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGlyphContainer.o -MD -MP -MF $(DEPDIR)/FTGlyphContainer.Tpo -c -o FTGlyphContainer.o `test -f 'ppgltk/FT/FTGlyphContainer.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGlyphContainer.cpp
	mv -f $(DEPDIR)/FTGlyphContainer.Tpo $(DEPDIR)/FTGlyphContainer.Po
#	source='ppgltk/FT/FTGlyphContainer.cpp' object='FTGlyphContainer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGlyphContainer.o `test -f 'ppgltk/FT/FTGlyphContainer.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTGlyphContainer.cpp

FTGlyphContainer.obj: ppgltk/FT/FTGlyphContainer.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTGlyphContainer.obj -MD -MP -MF $(DEPDIR)/FTGlyphContainer.Tpo -c -o FTGlyphContainer.obj `if test -f 'ppgltk/FT/FTGlyphContainer.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGlyphContainer.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGlyphContainer.cpp'; fi`
	mv -f $(DEPDIR)/FTGlyphContainer.Tpo $(DEPDIR)/FTGlyphContainer.Po
#	source='ppgltk/FT/FTGlyphContainer.cpp' object='FTGlyphContainer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTGlyphContainer.obj `if test -f 'ppgltk/FT/FTGlyphContainer.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTGlyphContainer.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTGlyphContainer.cpp'; fi`

FTLibrary.o: ppgltk/FT/FTLibrary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTLibrary.o -MD -MP -MF $(DEPDIR)/FTLibrary.Tpo -c -o FTLibrary.o `test -f 'ppgltk/FT/FTLibrary.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTLibrary.cpp
	mv -f $(DEPDIR)/FTLibrary.Tpo $(DEPDIR)/FTLibrary.Po
#	source='ppgltk/FT/FTLibrary.cpp' object='FTLibrary.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTLibrary.o `test -f 'ppgltk/FT/FTLibrary.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTLibrary.cpp

FTLibrary.obj: ppgltk/FT/FTLibrary.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTLibrary.obj -MD -MP -MF $(DEPDIR)/FTLibrary.Tpo -c -o FTLibrary.obj `if test -f 'ppgltk/FT/FTLibrary.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTLibrary.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTLibrary.cpp'; fi`
	mv -f $(DEPDIR)/FTLibrary.Tpo $(DEPDIR)/FTLibrary.Po
#	source='ppgltk/FT/FTLibrary.cpp' object='FTLibrary.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTLibrary.obj `if test -f 'ppgltk/FT/FTLibrary.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTLibrary.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTLibrary.cpp'; fi`

FTPoint.o: ppgltk/FT/FTPoint.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTPoint.o -MD -MP -MF $(DEPDIR)/FTPoint.Tpo -c -o FTPoint.o `test -f 'ppgltk/FT/FTPoint.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTPoint.cpp
	mv -f $(DEPDIR)/FTPoint.Tpo $(DEPDIR)/FTPoint.Po
#	source='ppgltk/FT/FTPoint.cpp' object='FTPoint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTPoint.o `test -f 'ppgltk/FT/FTPoint.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTPoint.cpp

FTPoint.obj: ppgltk/FT/FTPoint.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTPoint.obj -MD -MP -MF $(DEPDIR)/FTPoint.Tpo -c -o FTPoint.obj `if test -f 'ppgltk/FT/FTPoint.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTPoint.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTPoint.cpp'; fi`
	mv -f $(DEPDIR)/FTPoint.Tpo $(DEPDIR)/FTPoint.Po
#	source='ppgltk/FT/FTPoint.cpp' object='FTPoint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTPoint.obj `if test -f 'ppgltk/FT/FTPoint.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTPoint.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTPoint.cpp'; fi`

FTSize.o: ppgltk/FT/FTSize.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTSize.o -MD -MP -MF $(DEPDIR)/FTSize.Tpo -c -o FTSize.o `test -f 'ppgltk/FT/FTSize.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTSize.cpp
	mv -f $(DEPDIR)/FTSize.Tpo $(DEPDIR)/FTSize.Po
#	source='ppgltk/FT/FTSize.cpp' object='FTSize.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTSize.o `test -f 'ppgltk/FT/FTSize.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTSize.cpp

FTSize.obj: ppgltk/FT/FTSize.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTSize.obj -MD -MP -MF $(DEPDIR)/FTSize.Tpo -c -o FTSize.obj `if test -f 'ppgltk/FT/FTSize.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTSize.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTSize.cpp'; fi`
	mv -f $(DEPDIR)/FTSize.Tpo $(DEPDIR)/FTSize.Po
#	source='ppgltk/FT/FTSize.cpp' object='FTSize.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTSize.obj `if test -f 'ppgltk/FT/FTSize.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTSize.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTSize.cpp'; fi`

FTTextureGlyph.o: ppgltk/FT/FTTextureGlyph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTTextureGlyph.o -MD -MP -MF $(DEPDIR)/FTTextureGlyph.Tpo -c -o FTTextureGlyph.o `test -f 'ppgltk/FT/FTTextureGlyph.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTTextureGlyph.cpp
	mv -f $(DEPDIR)/FTTextureGlyph.Tpo $(DEPDIR)/FTTextureGlyph.Po
#	source='ppgltk/FT/FTTextureGlyph.cpp' object='FTTextureGlyph.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTTextureGlyph.o `test -f 'ppgltk/FT/FTTextureGlyph.cpp' || echo '$(srcdir)/'`ppgltk/FT/FTTextureGlyph.cpp

FTTextureGlyph.obj: ppgltk/FT/FTTextureGlyph.cpp
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT FTTextureGlyph.obj -MD -MP -MF $(DEPDIR)/FTTextureGlyph.Tpo -c -o FTTextureGlyph.obj `if test -f 'ppgltk/FT/FTTextureGlyph.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTTextureGlyph.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTTextureGlyph.cpp'; fi`
	mv -f $(DEPDIR)/FTTextureGlyph.Tpo $(DEPDIR)/FTTextureGlyph.Po
#	source='ppgltk/FT/FTTextureGlyph.cpp' object='FTTextureGlyph.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o FTTextureGlyph.obj `if test -f 'ppgltk/FT/FTTextureGlyph.cpp'; then $(CYGPATH_W) 'ppgltk/FT/FTTextureGlyph.cpp'; else $(CYGPATH_W) '$(srcdir)/ppgltk/FT/FTTextureGlyph.cpp'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
