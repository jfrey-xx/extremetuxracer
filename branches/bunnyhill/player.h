// --------------------------------------------------------------------
// 
// Extreme Tuxracer - Bunny Hill
//
// Copyright (C) 2009 ETR Team <http://www.extremetuxracer.com>
//
// --------------------------------------------------------------------

// player will be the central unit for multiplaying and all stuff
// about players. Currently it contains only the ctrl structure and
// some function to code the steering impulses generated by the
// keyboard or by the mouse

#ifndef PLAYER_H
#define PLAYER_H

#include "bh.h"

#define MAX_PLAYERS 4

typedef unsigned short TSteerCtrl;

// the control structure is related to an abstract layer of the character.
typedef struct {
	// steering commands from the keyboard (or elsewhere=
    float	turn;  			// -1 left, +1 right            
	bool    brake;			// braking
	bool    paddle;			// accelerating
	bool    brakeX;			// hidden option: hard braking
	bool    paddleX;		// hidden option: fast accelerating
	bool	jump;			

	// secundary commands, calculated either in loop or in physics
	float   turn_animation;
	float   is_paddling;
	float   paddle_time;
	float   jump_level;

	// main params
	TVector3 pos;		
    TVector3 vel;     	
	TVector3 dir;			// normalized velocity vector

	float dir_angle;		// angle of direction, two-dimensional
	float speed;			// length of vel within wimestep
	float nmlspeed;			// length of vel, normalized and outside timestep
	float realspeed;		// km/h 
	bool  steer_enabled;	// true, if near to the surface or an object
	float deviation;		// z-direction (dot product)

	TVector3 netforce;		// sum of all forces
	TQuaternion orientation;        
	bool firstorient; 		// true at the beginning

	// the view components. viewpos and viewdir are used to compute viewmat (the view matrix). 
	// Viewpos and viewdir are result of the main params
	TVector3 viewpos;
	TVector3 viewdir;
	TMatrix  viewmat;
	TVector3 lastpos; 		// for view interpolation
	TVector3 lastdir;		// for view interpolation


	TVector3 surf_nml;
	float    friction;
	float    depth;
    bool     airborne;   
	bool     final_state;	
} TControl;

typedef struct {
	TControl control;
	char *name;
	TSteerCtrl steer;
} TPlayer;

class CPlayer {
private:
	TPlayer players[MAX_PLAYERS];
	int numPlayers;
public:
	CPlayer ();
	~CPlayer ();

	TControl *ctrl (int plyr);
};

// --------------------------------------------------------------------

void SetPlyrPaddling (bool val);
void SetPlyrBraking (bool val);
void SetPlyrTurnleft (bool val);
void SetPlyrTurnright (bool val);
void SetPlyrJumping (bool val);
void SetExtPaddling (bool val);
void SetExtBraking (bool val);

extern CPlayer Player;
extern TSteerCtrl steer;

#endif


